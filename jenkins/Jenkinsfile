pipeline {
    agent any

    environment {
        GITHUB_PAT       = credentials('github-pat')          // GitHub Personal Access Token
        SLACK_WEBHOOK    = credentials('slack-webhook')       // Slack Webhook URL
        JWT_SECRET_KEY   = credentials('jwt-secret-key')      // JWT secret key
    }

    stages {
        stage('Clone') {
            steps {
                git 'https://github.com/udaybhadauria/flask-cicd.git'
            }
        }

        stage('Prepare .env') {
            steps {
                script {
                    writeFile file: '.env', text: """
SLACK_WEBHOOK_URL=${SLACK_WEBHOOK}
JWT_SECRET_KEY=${JWT_SECRET_KEY}
"""
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t flask-cicd-app .'
            }
        }

        stage('Run Unit Tests') {
            steps {
                sh '''
                    docker run --rm \
                        -v /home/pi/flask-cicd/test_results:/app/test_results \
                        -e SLACK_WEBHOOK_URL="$SLACK_WEBHOOK" \
                        flask-cicd-app bash run_tests.sh
                '''
            }
        }

        stage('Run Container') {
            steps {
                sh '''
                    echo "üßπ Cleaning up old container and port..."
                    docker stop flask-app || true
                    docker rm flask-app || true

                    if lsof -i:5000; then
                        echo "‚ö†Ô∏è Port 5000 is in use. Killing process..."
                        fuser -k 5000/tcp || true
                    fi

                    echo "üöÄ Starting new container..."
                    docker run -d -p 5000:5000 --name flask-app flask-cicd-app
                '''
            }
        }
    }

    post {
        success {
            script {
                def durationSec = (currentBuild.duration / 1000).toInteger()
                def minutes = durationSec.intdiv(60)
                def seconds = durationSec % 60

                def summary = """{
"text": "‚úÖ *Build SUCCESS*: Job ${env.JOB_NAME} #${env.BUILD_NUMBER} - <${env.BUILD_URL}|View Build>\\n*Duration:* ${minutes}m ${seconds}s"
}"""

                sh "curl -X POST -H \"Content-type: application/json\" --data '${summary}' \$SLACK_WEBHOOK"
            }
        }

        failure {
            script {
                def durationSec = (currentBuild.duration / 1000).toInteger()
                def minutes = durationSec.intdiv(60)
                def seconds = durationSec % 60

                def summary = """{
"text": "‚ùå *Build FAILED*: Job ${env.JOB_NAME} #${env.BUILD_NUMBER} - <${env.BUILD_URL}|View Build>\\n*Duration:* ${minutes}m ${seconds}s"
}"""

                sh "curl -X POST -H \"Content-type: application/json\" --data '${summary}' \$SLACK_WEBHOOK"
            }
        }
    }
}
